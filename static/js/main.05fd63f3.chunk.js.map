{"version":3,"sources":["Task.js","Column.js","Modalsetwindow.js","App.js","serviceWorker.js","index.js"],"names":["Task","props","task","changeTaskStatus","deleteTask","Col","Card","CardBody","name","Button","size","onClick","el","id","Alert","color","priority","status","Column","tasks","column","title","filter","sort","a","b","map","Modalsetwindow","useState","isModalOpen","setIsModalOpen","newTitle","setNewTitle","newPriority","setNewPriority","newStatus","setNewStatus","Modal","isOpen","ModalHeader","ModalBody","Label","Input","type","value","onChange","e","target","Row","ModalFooter","addNewCard","uuidv4","App","taskList","columnList","statuses","setTasks","priorityTask","taskid","direction","newTasks","indexOf","del","Container","newName","newTask","newCard","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.05fd63f3.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport {Col, Card, CardBody, Button, Alert} from 'reactstrap';\n\n\nfunction Task(props) {\n    const {task, changeTaskStatus, deleteTask} = props\n\n    const alertColors = ['success', 'warning', 'danger']\n\n\n    return (\n\n        <div>\n\n            <Col>\n                <Card>\n                    <CardBody>\n                        {task.name}\n                        <Button size='sm' onClick={(el => deleteTask(task.id))}>Delete</Button>\n                        <Alert color={alertColors[task.priority]}>\n                            {task.priority}\n                            {task.priority !==2 &&\n                            <Button size='sm' onClick={() => changeTaskStatus(task.id, 'up')}> ⬆️</Button>\n                            }\n                            {\" \" }\n                            {task.priority !==0 &&\n                            <Button size='sm' onClick={() => changeTaskStatus(task.id, 'down')}> ⬇️️</Button>\n                            }\n                        </Alert>\n                    </CardBody>\n\n                    <CardBody>\n                        {task.status !== 'todo' &&\n                        <Button onClick={() => changeTaskStatus(task.id, 'left')}>⬅️</Button>}\n                        {task.status !== 'done' &&\n                        <Button onClick={() => changeTaskStatus(task.id, 'right')}>➡️</Button>}\n\n                    </CardBody>\n                </Card>\n\n            </Col>\n\n        </div>\n    );\n}\n\nexport default Task;\n","import React from 'react';\nimport './App.css';\nimport {Col} from 'reactstrap';\nimport Task from './Task';\n\n\nfunction Column(props) {\n    const {tasks, changeTaskStatus, column, deleteTask} = props\n\n    return (\n\n        <div>\n\n            <Col>\n                <h3>{column.title}</h3>\n                {tasks.filter(el => el.status === column.status)\n                    .sort((a,b) => b.priority - a.priority)\n                    .map(el => <Task task={el} changeTaskStatus={changeTaskStatus} deleteTask={deleteTask}/>)}\n\n            </Col>\n\n        </div>\n    );\n}\n\nexport default Column;\n","import React, {useState} from 'react';\n\nimport './App.css';\nimport {Modal, Label, Input, ModalHeader, ModalBody, ModalFooter, Button, Col, Row} from 'reactstrap';\n\n\nfunction Modalsetwindow(props) {\n\n\n    const [isModalOpen, setIsModalOpen] = useState(false)\n    const [newTitle, setNewTitle] = useState('')\n    const [newPriority, setNewPriority] = useState(0)\n    const [newStatus, setNewStatus] = useState(\"todo\")\n\n    const closeModalWindow = () => {\n        props.addNewCard(newTitle, newPriority, newStatus)\n        setIsModalOpen(false)\n        setNewTitle('')\n    }\n\n       return (\n        <>\n            <Button onClick={() => setIsModalOpen(true)}> Add New Task</Button>\n            <Modal isOpen={isModalOpen}>\n                <ModalHeader> Would You Like to Add New Task? </ModalHeader>\n                <ModalBody>\n\n                    <Label> New Title</Label>\n                    <Input type='text' value={newTitle}\n                           onChange={(e) => setNewTitle(e.target.value)}/> {/*e global object that works with value*/}\n\n\n                    <Row>\n                        <Col>\n                            <Label> priority </Label>\n                            <Input type='select' value={newPriority} onChange={(e)=> setNewPriority(e.target.value)}>\n                                <option value={0}> Low</option>\n                                <option value={1}> Medium</option>\n                                <option value={2}> High </option>\n\n                            </Input>\n                        </Col>\n                        \n                        <Col>\n                            <Label> Status</Label>\n                            <Input type='select' value={newStatus} onChange={(e) => setNewStatus(e.target.value)}>\n                                <option value={'todo'}> Todo</option>\n                                <option value={'in progress'}> In progress</option>\n                                <option value={'review'}> Review</option>\n                                <option value={'done'}> Done</option>\n\n                            </Input>\n                        </Col>\n\n                    </Row>\n\n\n                </ModalBody>\n\n\n                <ModalFooter>\n                    <Button onClick={closeModalWindow}> Create New Task</Button>\n                    {' '}\n\n                    <Button onClick={() => setIsModalOpen(false)}>Cancel</Button>\n                </ModalFooter>\n\n\n            </Modal>\n        </>\n    );\n}\n\nexport default Modalsetwindow;\n","import React, {useState} from 'react';\nimport './App.css';\nimport {Container, Row} from 'reactstrap';\nimport Column from \"./Column\";\nimport {v4 as uuidv4} from 'uuid';\nimport Modalsetwindow from \"./Modalsetwindow\";\n\nuuidv4(); // ⇨ '9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d'\n\nfunction App() {\n    const taskList = [\n        {id: uuidv4(), name: 'First', priority: 0, status: 'todo'},\n        {id: uuidv4(), name: 'Second', priority: 1, status: 'todo'},\n        {id: uuidv4(), name: 'Third', priority: 2, status: 'todo'},\n        {id: uuidv4(), name: 'Fourth', priority: 3, status: 'todo'},\n    ]\n    const columnList = [\n        {id: uuidv4(), title: 'To do', status: 'todo'},\n        {id: uuidv4(), title: 'In Progress', status: 'in progress'},\n        {id: uuidv4(), title: 'Review', status: 'review'},\n        {id: uuidv4(), title: \"Done\", status: 'done'},\n    ]\n\n\n    const statuses = ['todo', 'in progress', 'review', 'done']\n    const [tasks, setTasks] = useState(taskList)\n    const priorityTask = [0, 1, 2];\n\n\n    const addNewCard = (newName, newPriority, newStatus) => {\n        const newTask = {id: uuidv4(), name: newName, priority: newPriority, status: newStatus}\n        const newCard = [...tasks, newTask]\n        setTasks(newCard)\n    }\n\n\n    const changeTaskStatus = (taskid, direction) => {\n        const newTasks = tasks.map(el => {\n            if (el.id === taskid) {\n                if (direction === 'right') el.status = statuses[statuses.indexOf(el.status) + 1]\n                if (direction === 'left') el.status = statuses[statuses.indexOf(el.status) - 1]\n                if (direction === 'up') el.priority = priorityTask[priorityTask.indexOf(el.priority) + 1]\n                if (direction === 'down') el.priority = priorityTask[priorityTask.indexOf(el.priority) - 1]\n            }\n            return el\n        })\n        setTasks(newTasks)\n    }\n    const deleteTask = (taskid) => {\n        const del = tasks.filter(el =>el.id !== taskid)\n        setTasks(del)\n    }\n\n    return (\n\n        <div>\n            <Container>\n\n                <Modalsetwindow addNewCard={addNewCard}/>\n\n                <Row>\n                    {columnList.map(el =>\n                            <Column tasks={tasks} column={el} changeTaskStatus={changeTaskStatus} deleteTask={deleteTask}/>\n                        // <Column tasks={tasks} title={'in progress'} changeTaskStatus={changeTaskStatus}/>\n                        // <Column tasks={tasks} title={'review'} changeTaskStatus={changeTaskStatus}/>\n                        // <Column tasks={tasks} title={'done'} changeTaskStatus={changeTaskStatus}/>\n                    )}\n                </Row>\n            </Container>\n\n            <Modalsetwindow/>\n\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}